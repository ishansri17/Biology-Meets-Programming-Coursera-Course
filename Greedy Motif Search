def Count(Motifs):
    count = {}  # initializing the count dictionary
    # your code here
    t = len(Motifs[0]) #len of first motif
    for symbol in "ATCG":
        count[symbol] = []
        for i in range(t):
            count[symbol].append(0)
    k = len(Motifs)
    for i in range(k):
        for j in range(t):
            symbol = Motifs[i][j]
            count[symbol][j] += 1

    return count

# Input:  A set of kmers Motifs
# Output: A consensus string of Motifs.
def Consensus(Motifs):
    k = len(Motifs[0])
    count = Count(Motifs)
    consensus = ""
    for j in range(k):
        m = 0
        frequentSymbol = ""
        for symbol in "ACGT":
            if count[symbol][j] > m:
                m = count[symbol][j]
                frequentSymbol = symbol
        consensus += frequentSymbol

    return consensus

# Input:  A set of k-mers Motifs
# Output: The score of these k-mers.
def Score(Motifs):
    # Insert code here
    score = []
    consensus = Consensus(Motifs)
    k = len(Motifs[0])
    l = len(Motifs)
    for j in range(k):
        sum = 0
        for i in range(l):
            symbol = Motifs[i][j]
            if symbol != consensus[j]:
                sum += 1
        score.append(sum)
    total = 0
    for val in range(len(score)):
        total += score[val]
    return total

def Profile(Motifs):
    profile = Count(Motifs)
    t = len(Motifs)
    k = len(Motifs[0])

    for i in profile:
        for j in range(k):
            profile[i][j] = profile[i][j] / t

    return profile
def Pr(Text, Profile):
    t = len(Text)
    prob = 1
    for i in range(t):
        prob = prob * Profile[Text[i]][i]
    return prob

def ProfileMostProbablePattern(text,k,profile):
    p=-1
    result = ""
    for i in range(len(text)-k+1):
        seq=text[i:i+k]
        pr=Pr(seq,profile)
        if pr>p:
            p=pr
            result=seq
    return result

def GreedyMotifSearch(Dna,k,t):
    BestMotifs = []
    for i in range(0, t):
        BestMotifs.append(Dna[i][0:k])
    n = len(Dna[0])
    for m in range(n-k+1):
        Motifs = []
        Motifs.append(Dna[0][m:m+k])
        for j in range(1, t):
            P = Profile(Motifs[0:j])
            Motifs.append(ProfileMostProbablePattern(Dna[j], k, P))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotifs, Score
 
 def GreedyMotifSearch(Dna,k,t):
    BestMotifs = []
    for i in range(0, t):
        BestMotifs.append(Dna[i][0:k])
    n = len(Dna[0])
    for m in range(n-k+1):
        Motifs = []
        Motifs.append(Dna[0][m:m+k])
        for j in range(1, t):
            P = Profile(Motifs[0:j])
            Motifs.append(ProfileMostProbablePattern(Dna[j], k, P))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotifs, Score

